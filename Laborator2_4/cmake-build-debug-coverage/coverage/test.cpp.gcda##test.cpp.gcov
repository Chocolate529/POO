        -:    0:Source:C:/Users/lupse/CLionProjects/POO/Laborator2_4/teste/test.cpp
        -:    0:Graph:C:\Users\lupse\CLionProjects\POO\Laborator2_4\cmake-build-debug-coverage\CMakeFiles\Laborator2_4.dir\teste\test.cpp.gcno
        -:    0:Data:C:\Users\lupse\CLionProjects\POO\Laborator2_4\cmake-build-debug-coverage\CMakeFiles\Laborator2_4.dir\teste\test.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include "../service/service_medicamente.h"
        -:    5:#include "../domain/lista.h"
        -:    6:#include "test.h"
function _Z27testAdaugaMedicamentServicev called 1 returned 100% blocks executed 79%
        1:    7:void testAdaugaMedicamentService() {
        -:    8:    VectorDynamic v;
        1:    9:    initVector(&v, 2);
        1:    9-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   10:    int response = adaugaMedicamentService(&v, 1, "Paracetamol", 500, 10);
        1:   10-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   11:    assert(response == 1);
        1:   11-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   11-block  1
call    2 never executed
        1:   11-block  2
       1*:   12:    assert(size(&v) == 1);
        1:   12-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   12-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   12-block  2
call    5 never executed
        1:   12-block  3
       1*:   13:    assert(strcmp(getNume(*getElement(&v, 0)), "Paracetamol") == 0);
        1:   13-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   13-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   13-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   13-block  3
call    8 never executed
        1:   13-block  4
        -:   14:
        1:   15:    response = adaugaMedicamentService(&v, 1, "Paracetamol", 500, 10);
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   16:    assert(response == 0);
        1:   16-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   16-block  1
call    2 never executed
        1:   16-block  2
       1*:   17:    assert(size(&v) == 1);
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   17-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   17-block  2
call    5 never executed
        1:   17-block  3
       1*:   18:    assert(getCantitate(*getElement(&v, 0))== 20);
        1:   18-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   18-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   18-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   18-block  3
call    8 never executed
        1:   18-block  4
        -:   19:
        1:   20:    response = adaugaMedicamentService(&v, -1, "", -1, -1);
        1:   20-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   21:    assert(response == 2);
        1:   21-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   21-block  1
call    2 never executed
        1:   21-block  2
        1:   22:    freeVector(&v);
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23:}
        1:   23-block  0
        -:   24:
function _Z33testActualizeazaMedicamentServicev called 1 returned 100% blocks executed 82%
        1:   25:void testActualizeazaMedicamentService() {
        -:   26:    VectorDynamic v;
        1:   27:    initVector(&v, 2);
        1:   27-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   28:    adaugaMedicamentService(&v, 1, "Paracetamol", 500, 10);
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29:    int response = actualizeazaMedicamentService(&v, 1, "Ibuprofen", 400);
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   30:    assert(response == 1);
        1:   30-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   30-block  1
call    2 never executed
        1:   30-block  2
       1*:   31:    assert(strcmp(getNume(*getElement(&v, 0)), "Ibuprofen") == 0);
        1:   31-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   31-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   31-block  3
call    8 never executed
        1:   31-block  4
        -:   32:
        1:   33:    response = actualizeazaMedicamentService(&v, 2, "Ibuprofen", 400);
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   34:    assert(response == 0);
        1:   34-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   34-block  1
call    2 never executed
        1:   34-block  2
        -:   35:
        1:   36:    response = actualizeazaMedicamentService(&v, -1, "", -4);
        1:   36-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   37:    assert(response == 2);
        1:   37-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   37-block  1
call    2 never executed
        1:   37-block  2
        1:   38:    freeVector(&v);
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39:}
        1:   39-block  0
        -:   40:
function _Z27testStergeMedicamentServicev called 1 returned 100% blocks executed 83%
        1:   41:void testStergeMedicamentService() {
        -:   42:    VectorDynamic v;
        1:   43:    initVector(&v, 2);
        1:   43-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   44:    adaugaMedicamentService(&v, 1, "Paracetamol", 500, 10);
        1:   44-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   45:    adaugaMedicamentService(&v, 2, "Paracetamol", 500, 10);
        1:   45-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   46:    adaugaMedicamentService(&v, 3, "Paracetamol", 500, 10);
        1:   46-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   47:    int response = stergeMedicamentService(&v, 1);
        1:   47-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   48:
       1*:   49:    assert(response == 1);
        1:   49-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   49-block  1
call    2 never executed
        1:   49-block  2
       1*:   50:    assert(size(&v) == 2);
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   50-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   50-block  2
call    5 never executed
        1:   50-block  3
        1:   51:    response = stergeMedicamentService(&v, 1);
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   52:    assert(response == 0);
        1:   52-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   52-block  1
call    2 never executed
        1:   52-block  2
        -:   53:
        1:   54:    response = stergeMedicamentService(&v, -1);
        1:   54-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   55:    assert(response == 2);
        1:   55-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   55-block  1
call    2 never executed
        1:   55-block  2
        1:   56:    freeVector(&v);
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57:}
        1:   57-block  0
        -:   58:
function _Z27testSortMedicamenteDupaNumev called 1 returned 100% blocks executed 87%
        1:   59:void testSortMedicamenteDupaNume() {
        -:   60:    VectorDynamic v;
        1:   61:    initVector(&v, 2);
        1:   61-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   62:    adaugaMedicamentService(&v, 1, "Ibuprofen", 400, 10);
        1:   62-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   63:    adaugaMedicamentService(&v, 2, "Paracetamol", 500, 20);
        1:   63-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   64:    adaugaMedicamentService(&v, 3, "Parasinus", 600, 30);
        1:   64-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   65:    adaugaMedicamentService(&v, 4, "Algocalmin", 700, 40);
        1:   65-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   66:    VectorDynamic sorted = sortMedicamenteDupaNume(&v);
        1:   66-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   67:    assert(strcmp(getNume(*getElement(&sorted, 0)), "Algocalmin") == 0);
        1:   67-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   67-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   67-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   67-block  3
call    8 never executed
        1:   67-block  4
       1*:   68:    assert(strcmp(getNume(*getElement(&sorted, 1)), "Ibuprofen") == 0);
        1:   68-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   68-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   68-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   68-block  3
call    8 never executed
        1:   68-block  4
       1*:   69:    assert(strcmp(getNume(*getElement(&sorted, 2)), "Paracetamol") == 0);
        1:   69-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   69-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   69-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   69-block  3
call    8 never executed
        1:   69-block  4
       1*:   70:    assert(strcmp(getNume(*getElement(&sorted, 3)), "Parasinus") == 0);
        1:   70-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   70-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   70-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   70-block  3
call    8 never executed
        1:   70-block  4
        1:   71:    freeVector(&sorted);
        1:   71-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   72:    freeVector(&v);
        1:   72-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   73:}
        1:   73-block  0
        -:   74:
function _Z37testSortMedicamenteCrescatorCantitatev called 1 returned 100% blocks executed 89%
        1:   75:void testSortMedicamenteCrescatorCantitate() {
        -:   76:    VectorDynamic v;
        1:   77:    initVector(&v, 2);
        1:   77-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   78:    adaugaMedicamentService(&v, 1, "Paracetamol", 500, 20);
        1:   78-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   79:    adaugaMedicamentService(&v, 2, "Ibuprofen", 400, 10);
        1:   79-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   80:    VectorDynamic sorted = sortMedicamenteCrescatorCantitate(&v);
        1:   80-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   81:    assert(getCantitate(*getElement(&sorted, 0)) == 10);
        1:   81-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   81-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   81-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   81-block  3
call    8 never executed
        1:   81-block  4
       1*:   82:    assert(getCantitate(*getElement(&sorted, 1)) == 20);
        1:   82-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   82-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   82-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   82-block  3
call    8 never executed
        1:   82-block  4
        1:   83:    freeVector(&sorted);
        1:   83-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   84:    freeVector(&v);
        1:   84-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   85:}
        1:   85-block  0
        -:   86:
function _Z40testSortMedicamenteDescrescatorCantitatev called 1 returned 100% blocks executed 89%
        1:   87:void testSortMedicamenteDescrescatorCantitate() {
        -:   88:    VectorDynamic v;
        1:   89:    initVector(&v, 2);
        1:   89-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   90:    adaugaMedicamentService(&v, 1, "Paracetamol", 500, 10);
        1:   90-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   91:    adaugaMedicamentService(&v, 2, "Ibuprofen", 400, 20);
        1:   91-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   92:    VectorDynamic sorted = sortMedicamenteDescrescatorCantitate(&v);
        1:   92-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   93:    assert(getCantitate(*getElement(&sorted, 0)) == 20);
        1:   93-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   93-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   93-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   93-block  3
call    8 never executed
        1:   93-block  4
       1*:   94:    assert(getCantitate(*getElement(&sorted, 1)) == 10);
        1:   94-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   94-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   94-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   94-block  3
call    8 never executed
        1:   94-block  4
        1:   95:    freeVector(&sorted);
        1:   95-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   96:    freeVector(&v);
        1:   96-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   97:}
        1:   97-block  0
        -:   98:
function _Z21testFiltrareCantitatev called 1 returned 100% blocks executed 88%
        1:   99:void testFiltrareCantitate() {
        -:  100:    VectorDynamic v;
        1:  101:    initVector(&v, 2);
        1:  101-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  102:    adaugaMedicamentService(&v, 1, "Paracetamol", 500, 20);
        1:  102-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  103:    adaugaMedicamentService(&v, 2, "Ibuprofen", 400, 10);
        1:  103-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  104:    VectorDynamic filtered = filtrareCantitate(&v, 15);
        1:  104-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  105:    assert(size(&filtered) == 1);
        1:  105-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  105-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  105-block  2
call    5 never executed
        1:  105-block  3
       1*:  106:    assert(getCantitate(*getElement(&filtered, 0)) == 10);
        1:  106-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  106-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  106-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:  106-block  3
call    8 never executed
        1:  106-block  4
        1:  107:    freeVector(&filtered);
        1:  107-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  108:    freeVector(&v);
        1:  108-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  109:}
        1:  109-block  0
        -:  110:
function _Z18testFiltrareLiterav called 1 returned 100% blocks executed 88%
        1:  111:void testFiltrareLitera() {
        -:  112:    VectorDynamic v;
        1:  113:    initVector(&v, 2);
        1:  113-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  114:    adaugaMedicamentService(&v, 1, "Paracetamol", 500, 20);
        1:  114-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  115:    adaugaMedicamentService(&v, 2, "Ibuprofen", 400, 10);
        1:  115-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  116:    VectorDynamic filtered = filtrareLitera(&v, 'I');
        1:  116-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  117:    assert(size(&filtered) == 1);
        1:  117-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  117-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  117-block  2
call    5 never executed
        1:  117-block  3
       1*:  118:    assert(strcmp(getNume(*getElement(&filtered, 0)), "Ibuprofen") == 0);
        1:  118-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  118-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  118-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:  118-block  3
call    8 never executed
        1:  118-block  4
        1:  119:    freeVector(&filtered);
        1:  119-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  120:    freeVector(&v);
        1:  120-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  121:}
        1:  121-block  0
        -:  122:
function _Z8runTestsv called 1 returned 100% blocks executed 100%
        1:  123:void runTests() {
        1:  124:    testAdaugaMedicamentService();
        1:  124-block  0
call    0 returned 1
        1:  125:    testActualizeazaMedicamentService();
call    0 returned 1
        1:  126:    testStergeMedicamentService();
call    0 returned 1
        1:  127:    testSortMedicamenteDupaNume();
call    0 returned 1
        1:  128:    testSortMedicamenteCrescatorCantitate();
call    0 returned 1
        1:  129:    testSortMedicamenteDescrescatorCantitate();
call    0 returned 1
        1:  130:    testFiltrareCantitate();
call    0 returned 1
        1:  131:    testFiltrareLitera();
call    0 returned 1
        1:  132:    printf("All tests passed!\n");
call    0 returned 1
        1:  133:}
