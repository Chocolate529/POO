        -:    0:Source:/mnt/c/Users/lupse/CLionProjects/Lab5/service_masini.c
        -:    0:Graph:/mnt/c/Users/lupse/CLionProjects/Lab5/cmake-build-debug-coverage/CMakeFiles/Lab5.dir/service_masini.c.gcno
        -:    0:Data:/mnt/c/Users/lupse/CLionProjects/Lab5/cmake-build-debug-coverage/CMakeFiles/Lab5.dir/service_masini.c.gcda
        -:    0:Runs:1
        -:    1:#include "service_masini.h"
        -:    2:
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:
        -:    7:#include "domeniu_masina.h"
        -:    8:#include "repo.h"
        -:    9:
function service_creeaza called 2 returned 100% blocks executed 71%
        2:   10:void* service_creeaza(repository* repo, int (*validator)(void*), void (*destroy_elem_lista)(void*), void* (*copie_elem_lista)(void*)) {
        2:   11:    service_masina* serv = malloc(sizeof(service_masina));
        2:   12:    if (serv == NULL) {
        2:   12-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   13:        printf("Allocation error!\n");
    %%%%%:   13-block  0
call    0 never executed
    #####:   14:        return NULL;
        -:   15:    }
        2:   16:    serv->lista_repos_undo = lista_creeaza(destroy_elem_lista, copie_elem_lista);
        2:   16-block  0
call    0 returned 2
        2:   17:    serv->lista_repos_redo = lista_creeaza(destroy_elem_lista, copie_elem_lista);
call    0 returned 2
        2:   18:    serv->repo = repo;
        2:   19:    serv->validator = validator;
        2:   20:    return serv;
        -:   21:}
        -:   22:
function service_destroy called 2 returned 100% blocks executed 100%
        2:   23:void service_destroy(service_masina* serv) {
        2:   24:    repo_destroy(serv->repo);
        2:   24-block  0
call    0 returned 2
        2:   25:    serv->repo = NULL;
        2:   26:    lista_destroy(serv->lista_repos_undo);
call    0 returned 2
        2:   27:    lista_destroy(serv->lista_repos_redo);
call    0 returned 2
        2:   28:    free(serv);
        2:   29:    serv = NULL;
        2:   30:}
        -:   31:
function service_adauga_element called 7 returned 100% blocks executed 86%
        7:   32:int service_adauga_element(const service_masina* serv, void* elem) {
        7:   33:    if (elem==NULL) {
        7:   33-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####:   34:        printf("Element NULL!\n");
    %%%%%:   34-block  0
call    0 never executed
    #####:   35:        return -1;
        -:   36:    }
        7:   37:    int ret = repo_verifica_existenta_element_dupa_id(serv->repo, serv->repo->get_id(elem));
        7:   37-block  0
call    0 returned 7
call    1 returned 7
        7:   38:    if (ret == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1:   39:        return -6;
        1:   39-block  0
        -:   40:    }
        6:   41:    ret = serv->validator(elem);
        6:   41-block  0
call    0 returned 6
        6:   42:    if (ret == -1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:   43:        return -1;
        1:   43-block  0
        -:   44:    }
        5:   45:    lista_push_back(serv->lista_repos_undo, serv->repo);
        5:   45-block  0
call    0 returned 5
        5:   46:    repo_adauga_element(serv->repo, elem);
call    0 returned 5
        5:   47:    return 0;
        -:   48:}
        -:   49:
function service_modifica_element called 3 returned 100% blocks executed 86%
        3:   50:int service_modifica_element(const service_masina* serv, void* elem) {
        3:   51:    if (elem==NULL) {
        3:   51-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:   52:        printf("Element NULL!\n");
    %%%%%:   52-block  0
call    0 never executed
    #####:   53:        return 1;
        -:   54:    }
        3:   55:    int ret = repo_verifica_existenta_element_dupa_id(serv->repo, serv->repo->get_id(elem));
        3:   55-block  0
call    0 returned 3
call    1 returned 3
        3:   56:    if (ret == -2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   57:        return -7;
        1:   57-block  0
        -:   58:    }
        2:   59:    ret = serv->validator(elem);
        2:   59-block  0
call    0 returned 2
        2:   60:    if (ret == -1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   61:        return -1;
        1:   61-block  0
        -:   62:    }
        1:   63:    lista_push_back(serv->lista_repos_undo, serv->repo);
        1:   63-block  0
call    0 returned 1
        1:   64:    repo_modifica_element(serv->repo, elem);
call    0 returned 1
        1:   65:    return 0;
        -:   66:}
        -:   67:
function service_cauta_element called 2 returned 100% blocks executed 100%
        2:   68:void* service_cauta_element(const service_masina* serv, int id) {
        2:   69:    void* elem = repo_cauta_element(serv->repo, id);
        2:   69-block  0
call    0 returned 2
        2:   70:    if (elem == NULL)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   71:        return NULL;
        1:   71-block  0
        1:   72:    return elem;
        1:   72-block  0
        -:   73:}
        -:   74:
function service_sterge_element called 3 returned 100% blocks executed 80%
        3:   75:int service_sterge_element(const service_masina* serv, const int id){
        3:   76:    int ret = repo_verifica_existenta_element_dupa_id(serv->repo, id);
        3:   76-block  0
call    0 returned 3
        3:   77:    if (ret == -2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   78:        return -8;
        1:   78-block  0
        -:   79:    }
        2:   80:    lista_push_back(serv->lista_repos_undo, serv->repo);
        2:   80-block  0
call    0 returned 2
        2:   81:    ret = repo_sterge_element(serv->repo, id);
call    0 returned 2
        2:   82:    if (ret == -5) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   83:        lista_pop(serv->lista_repos_undo);
    %%%%%:   83-block  0
call    0 never executed
    #####:   84:        return -8;
        -:   85:    }
        2:   86:    return 0;
        2:   86-block  0
        -:   87:}
        -:   88:
function service_inchiriaza_masina called 3 returned 100% blocks executed 100%
        3:   89:int service_inchiriaza_masina(const service_masina* serv, const int id) {
        5:   90:    for (int i=0; i<serv->repo->numar; i++) {
        3:   90-block  0
        2:   90-block  1
        5:   90-block  2
branch  0 taken 3
branch  1 taken 2 (fallthrough)
        3:   91:        if (serv->repo->get_id(serv->repo->lista[i]) == id) {
        3:   91-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        2:   92:            if (get_inchiriata_masina(serv->repo->lista[i]) == 0) {
        2:   92-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   93:                lista_push_back(serv->lista_repos_undo, serv->repo);
        1:   93-block  0
call    0 returned 1
        1:   94:                set_inchiriata_masina(serv->repo->lista[i], 1);
call    0 returned 1
        1:   95:                return 0;
        -:   96:            }
        -:   97:        }
        -:   98:    }
        2:   99:    return -6;
        2:   99-block  0
        -:  100:}
        -:  101:
function service_returneaza_masina called 3 returned 100% blocks executed 100%
        3:  102:int service_returneaza_masina(const service_masina* serv, const int id) {
        5:  103:    for (int i=0; i<serv->repo->numar; i++) {
        3:  103-block  0
        2:  103-block  1
        5:  103-block  2
branch  0 taken 3
branch  1 taken 2 (fallthrough)
        3:  104:        if (serv->repo->get_id(serv->repo->lista[i]) == id) {
        3:  104-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        2:  105:            if (get_inchiriata_masina(serv->repo->lista[i])== 1) {
        2:  105-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:  106:                lista_push_back(serv->lista_repos_undo, serv->repo);
        1:  106-block  0
call    0 returned 1
        1:  107:                set_inchiriata_masina(serv->repo->lista[i], 0);
call    0 returned 1
        1:  108:                return 0;
        -:  109:            }
        -:  110:        }
        -:  111:    }
        2:  112:    return -7;
        2:  112-block  0
        -:  113:}
        -:  114:
function service_vizualizare_dupa_categorie called 4 returned 100% blocks executed 100%
        4:  115:repository* service_vizualizare_dupa_categorie(const service_masina* serv, const char* categorie) {
        4:  116:    if (strcmp(categorie, "suv") != 0 && strcmp(categorie, "sport") != 0 && strcmp(categorie, "mini") != 0)
        4:  116-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  116-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  116-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        1:  117:        return NULL;
        1:  117-block  0
        3:  118:    repository* repo_masini_cat = repo_creeaza((void*)destroy_masina, (void*)get_id_masina, (void*)copiaza_masina);
        3:  118-block  0
call    0 returned 3
       12:  119:    for (int i = 0; i < serv->repo->numar; i++)
        9:  119-block  0
       12:  119-block  1
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        9:  120:        if (strcmp(get_categorie_masina(serv->repo->lista[i]), categorie) == 0)
        9:  120-block  0
call    0 returned 9
branch  1 taken 3 (fallthrough)
branch  2 taken 6
        3:  121:            repo_adauga_element(repo_masini_cat, repo_masini_cat->copie_element(serv->repo->lista[i]));
        3:  121-block  0
call    0 returned 3
call    1 returned 3
        3:  122:    return repo_masini_cat;
        3:  122-block  0
        -:  123:}
        -:  124:
function service_sortare called 4 returned 100% blocks executed 100%
        4:  125:void service_sortare(const service_masina* serv, const int crescator, const int mod) {
        4:  126:    lista_push_back(serv->lista_repos_undo, serv->repo);
        4:  126-block  0
call    0 returned 4
       12:  127:    for (int i=0; i<serv->repo->numar-1; i++) {
        8:  127-block  0
       12:  127-block  1
branch  0 taken 8
branch  1 taken 4 (fallthrough)
       20:  128:        for (int j=i+1; j<serv->repo->numar; j++)
        8:  128-block  0
       12:  128-block  1
       20:  128-block  2
branch  0 taken 12
branch  1 taken 8 (fallthrough)
       12:  129:            if ((mod == 0 && crescator == 1 && strcmp(get_categorie_masina(serv->repo->lista[j]),get_categorie_masina(serv->repo->lista[i])) < 0) ||
       12:  129-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 6
        6:  129-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 3
        3:  129-block  2
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0
       12:  129-block  3
branch  8 taken 6 (fallthrough)
branch  9 taken 6
       12:  130:                (mod == 0 && crescator == 0 && strcmp(get_categorie_masina(serv->repo->lista[i]),get_categorie_masina(serv->repo->lista[j])) < 0) ||
        6:  130-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        3:  130-block  1
call    2 returned 3
call    3 returned 3
branch  4 taken 0 (fallthrough)
branch  5 taken 3
        9:  130-block  2
branch  6 taken 6 (fallthrough)
branch  7 taken 3
        9:  131:                (mod == 1 && crescator == 1 && strcmp(get_model_masina(serv->repo->lista[j]),get_model_masina(serv->repo->lista[i])) < 0) ||
        6:  131-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        3:  131-block  1
call    2 returned 3
call    3 returned 3
branch  4 taken 2 (fallthrough)
branch  5 taken 1
        8:  131-block  2
branch  6 taken 5 (fallthrough)
branch  7 taken 3
        5:  132:                (mod == 1 && crescator == 0 && strcmp(get_model_masina(serv->repo->lista[i]),get_model_masina(serv->repo->lista[j])) < 0)){
        5:  132-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        3:  132-block  1
call    2 returned 3
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        7:  133:                    void* aux = serv->repo->lista[i];
        7:  134:                    serv->repo->lista[i] = serv->repo->lista[j];
        7:  135:                    serv->repo->lista[j] = aux;
        7:  135-block  0
        -:  136:            }
        -:  137:    }
        4:  138:}
        -:  139:
function service_undo called 2 returned 100% blocks executed 100%
        2:  140:int service_undo(service_masina* serv) {
        2:  141:    if (lista_empty(serv->lista_repos_undo))
        2:  141-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:  142:        return -99;
        1:  142-block  0
        1:  143:    lista_push_back(serv->lista_repos_redo, serv->repo);
        1:  143-block  0
call    0 returned 1
        1:  144:    repo_destroy(serv->repo);
call    0 returned 1
        1:  145:    serv->repo = lista_top(serv->lista_repos_undo);
call    0 returned 1
        1:  146:    lista_pop(serv->lista_repos_undo);
call    0 returned 1
        1:  147:    return 0;
        -:  148:}
        -:  149:
function service_redo called 2 returned 100% blocks executed 100%
        2:  150:int service_redo(service_masina* serv) {
        2:  151:    if (lista_empty(serv->lista_repos_redo))
        2:  151-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:  152:        return -99;
        1:  152-block  0
        1:  153:    lista_push_back(serv->lista_repos_undo, serv->repo);
        1:  153-block  0
call    0 returned 1
        1:  154:    repo_destroy(serv->repo);
call    0 returned 1
        1:  155:    serv->repo = lista_top(serv->lista_repos_redo);
call    0 returned 1
        1:  156:    lista_pop(serv->lista_repos_redo);
call    0 returned 1
        1:  157:    return 0;
        -:  158:}
